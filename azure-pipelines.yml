# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  vmImageName: 'ubuntu-latest'
  subscription: 'serviceconnection'
  SQLserver: 'mysqls.database.windows.net'
  DatabaseName: 'mysqldb'
  SQLuser: 'azureuser'
  SQLpassword: '123456789aA#'
  ACR: 'kpbracr.azurecr.io'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
     vmImage: $(vmImageName)

    steps:
    - task: replacetokens@5
      displayName: 'Replace tokens in appsettings.json'
      inputs:
        rootDirectory: '$(build.sourcesdirectory)/src/MyHealth.Web'
        targetFiles: 'appsettings.json'
        encoding: 'auto'
        tokenPattern: 'rm'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true
    - task: replacetokens@5
      inputs:
        rootDirectory: '$(build.sourcesdirectory)'
        targetFiles: 'mhc-aks.yaml'
        encoding: 'auto'
        tokenPattern: 'rm'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true

    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'serviceconnection'
        azureContainerRegistry: '{"loginServer":"kpbracr.azurecr.io", "id" : "/subscriptions/3fa1bbb2-d599-4850-92eb-dab7a2bcdef5/resourceGroups/AzureTraining/providers/Microsoft.ContainerRegistry/registries/kpbracr"}'
        dockerComposeFile: 'docker-compose.ci.build.yml'
        action: 'Run services'
        detached: false

    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'serviceconnection'
        azureContainerRegistry: '{"loginServer":"kpbracr.azurecr.io", "id" : "/subscriptions/3fa1bbb2-d599-4850-92eb-dab7a2bcdef5/resourceGroups/AzureTraining/providers/Microsoft.ContainerRegistry/registries/kpbracr"}'
        dockerComposeFile: 'docker-compose.yml'
        dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
        action: 'Build services'
        additionalImageTags: '$(Build.BuildId)'

    - task: DockerCompose@0
      inputs:
          containerregistrytype: 'Azure Container Registry'
          azureSubscription: 'serviceconnection'
          azureContainerRegistry: '{"loginServer":"kpbracr.azurecr.io", "id" : "/subscriptions/3fa1bbb2-d599-4850-92eb-dab7a2bcdef5/resourceGroups/AzureTraining/providers/Microsoft.ContainerRegistry/registries/kpbracr"}'
          dockerComposeFile: 'docker-compose.yml'
          dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
          action: 'Push services'
          additionalImageTags: '$(Build.BuildId)'

    - task: DockerCompose@0
      inputs:
          containerregistrytype: 'Azure Container Registry'
          azureSubscription: 'serviceconnection'
          azureContainerRegistry: '{"loginServer":"kpbracr.azurecr.io", "id" : "/subscriptions/3fa1bbb2-d599-4850-92eb-dab7a2bcdef5/resourceGroups/AzureTraining/providers/Microsoft.ContainerRegistry/registries/kpbracr"}'
          dockerComposeFile: 'docker-compose.yml'
          dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
          action: 'Lock services'
          outputDockerComposeFile: '$(Build.StagingDirectory)/docker-compose.yml'

    - task: CopyFiles@2
      inputs:
          SourceFolder: '$(build.sourcesdirectory)'
          Contents: |
            **/mhc-aks.yaml
            **/*.dacpac
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'deploy'
          publishLocation: 'Container'
      
- stage: Dev
  displayName: Dev stage
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
  - deployment: DB
    displayName: 'DB deployment'
    environment: 'development'
    pool:
       vmImange: 'windows-2019'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: SqlAzureDacpacDeployment@1
            displayName: 'Execute Azure SQL : DackpacTask'
            inputs:
              azureSubscription: 'serviceconnection'
              AuthenticationType: 'server'
              ServerName: '$(SQLserver)'
              DatabaseName: '$(DatabaseName)'
              SqlUsername: '$(SQLuser)'
              SqlPassword: '$(SQLpassword)'
              deployType: 'DacpacTask'
              DeploymentAction: 'Publish'
              DacpacFile: '$(Agent.BuildDirectory)/**/*.dacpac'
              IpDetectionMethod: 'AutoDetect'
              StartIpAddress: '0.0.0.0'
              EndIpAddress: '255.255.255.255'
              
  - deployment: AKS
    displayName: 'AKS deployment'
    environment: 'development'
    pool:
      vmImage: $(vmImageName) 
    strategy:
     runOnce:
       deploy:
         steps:
           - task: Kubernetes@1
             inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'serviceconnection'
                azureResourceGroup: 'AzureTraining'
                kubernetesCluster: 'myaks'
                command: 'apply'
                useConfigurationFile: true
                configuration: '$(Agent.BuildDirectory)/deploy/mhc-aks.yaml'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'
                azureSubscriptionEndpointForSecrets: 'serviceconnection'
                azureContainerRegistry: 'kpbracr.azurecr.io'
                secretName: 'mysecretkey'
                versionSpec: '1.8.1'
                checkLatest: true
                
           - task: Kubernetes@1
             inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'serviceconnection'
                azureResourceGroup: 'AzureTraining'
                kubernetesCluster: 'myaks'
                command: 'set'
                arguments: 'image deployments/mhc-front mhc-front=$(ACR)/myhealth.web:$(Build.BuildId)'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'
                azureSubscriptionEndpointForSecrets: 'serviceconnection'
                azureContainerRegistry: 'kpbracr.azurecr.io'
                secretName: 'mysecretkey'
